name: üöÄ Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  # Build cross-platform JAR distribution
  build-jar:
    name: üì¶ Build JAR Distribution
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: üìã Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: üî¢ Get version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: üî® Build JAR distribution
      run: |
        mvn clean compile -DskipTests
        mvn package -DskipTests
        mvn assembly:single -DskipTests
        
    - name: üì§ Upload JAR artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-distribution
        path: |
          target/jamplate-*-distribution.zip
          target/jamplate-*-distribution.tar.gz
          target/jamplate-*.jar
        retention-days: 5

  # Build macOS native packages
  build-macos:
    name: üçé Build macOS Packages
    runs-on: macos-latest
    needs: build-jar
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: üìã Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: üî® Build project
      run: |
        mvn clean compile -DskipTests
        mvn package -DskipTests
        
    - name: üì¶ Create macOS native packages
      run: |
        # Prepare jpackage input directory with all JARs
        mkdir -p target/jpackage-input
        cp target/jamplate-1.0-SNAPSHOT.jar target/jpackage-input/
        cp target/dependencies/*.jar target/jpackage-input/
        
        # Create app bundle
        jpackage \
          --input target/jpackage-input \
          --main-jar jamplate-1.0-SNAPSHOT.jar \
          --main-class media.samson.jamplate.HelloApplication \
          --name Jamplate \
          --app-version 1.0.0 \
          --vendor "Samson Media" \
          --description "Jamplate - Template Management Tool" \
          --copyright "Copyright 2025 Samson Media" \
          --dest target/native/mac \
          --type app-image \
          --icon src/main/resources/icons/app-icon.icns \
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" \
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" \
          --java-options "--add-modules java.desktop"
          
        # Create DMG installer
        jpackage \
          --input target/jpackage-input \
          --main-jar jamplate-1.0-SNAPSHOT.jar \
          --main-class media.samson.jamplate.HelloApplication \
          --name Jamplate \
          --app-version 1.0.0 \
          --vendor "Samson Media" \
          --description "Jamplate - Template Management Tool" \
          --copyright "Copyright 2025 Samson Media" \
          --dest target/native/mac \
          --type dmg \
          --icon src/main/resources/icons/app-icon.icns \
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" \
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" \
          --java-options "--add-modules java.desktop"
          
    - name: üì§ Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-packages
        path: |
          target/native/mac/*.dmg
          target/native/mac/*.app
        retention-days: 5

  # Build Windows native packages
  build-windows:
    name: ü™ü Build Windows Packages
    runs-on: windows-latest
    needs: build-jar
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: üìã Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: üî® Build project
      run: |
        mvn clean compile -DskipTests
        mvn package -DskipTests
        
    - name: üì¶ Create Windows native packages
      run: |
        # Prepare jpackage input directory with all JARs
        New-Item -ItemType Directory -Path "target/jpackage-input" -Force
        Copy-Item "target/jamplate-1.0-SNAPSHOT.jar" "target/jpackage-input/"
        Copy-Item "target/dependencies/*.jar" "target/jpackage-input/"
        
        # Create app image
        jpackage `
          --input target/jpackage-input `
          --main-jar jamplate-1.0-SNAPSHOT.jar `
          --main-class media.samson.jamplate.HelloApplication `
          --name Jamplate `
          --app-version 1.0.0 `
          --vendor "Samson Media" `
          --description "Jamplate - Template Management Tool" `
          --dest target/native/windows `
          --type app-image `
          --icon src/main/resources/icons/app-icon.ico `
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" `
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" `
          --java-options "--add-modules java.desktop"
          
        # Create MSI installer (recommended for Windows)
        jpackage `
          --input target/jpackage-input `
          --main-jar jamplate-1.0-SNAPSHOT.jar `
          --main-class media.samson.jamplate.HelloApplication `
          --name Jamplate `
          --app-version 1.0.0 `
          --vendor "Samson Media" `
          --description "Jamplate - Template Management Tool" `
          --dest target/native/windows `
          --type msi `
          --icon src/main/resources/icons/app-icon.ico `
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" `
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" `
          --java-options "--add-modules java.desktop" `
          --win-dir-chooser `
          --win-menu `
          --win-shortcut
          
        # Create EXE installer (alternative format)
        jpackage `
          --input target/jpackage-input `
          --main-jar jamplate-1.0-SNAPSHOT.jar `
          --main-class media.samson.jamplate.HelloApplication `
          --name Jamplate `
          --app-version 1.0.0 `
          --vendor "Samson Media" `
          --description "Jamplate - Template Management Tool" `
          --dest target/native/windows `
          --type exe `
          --icon src/main/resources/icons/app-icon.ico `
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" `
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" `
          --java-options "--add-modules java.desktop" `
          --win-dir-chooser `
          --win-menu `
          --win-shortcut
          
    - name: üì§ Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-packages
        path: |
          target/native/windows/*.msi
          target/native/windows/*.exe
          target/native/windows/Jamplate
        retention-days: 5

  # Build Linux native packages
  build-linux:
    name: üêß Build Linux Packages
    runs-on: ubuntu-latest
    needs: build-jar
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: üìã Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: üî® Build project
      run: |
        mvn clean compile -DskipTests
        mvn package -DskipTests
        
    - name: üì¶ Create Linux native packages
      run: |
        # Prepare jpackage input directory with all JARs
        mkdir -p target/jpackage-input
        cp target/jamplate-1.0-SNAPSHOT.jar target/jpackage-input/
        cp target/dependencies/*.jar target/jpackage-input/
        
        # Create app image
        jpackage \
          --input target/jpackage-input \
          --main-jar jamplate-1.0-SNAPSHOT.jar \
          --main-class media.samson.jamplate.HelloApplication \
          --name jamplate \
          --app-version 1.0.0 \
          --vendor "Samson Media" \
          --description "Jamplate - Template Management Tool" \
          --dest target/native/linux \
          --type app-image \
          --icon src/main/resources/icons/app-icon.png \
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" \
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" \
          --java-options "--add-modules java.desktop"
          
        # Create DEB package (Debian/Ubuntu)
        jpackage \
          --input target/jpackage-input \
          --main-jar jamplate-1.0-SNAPSHOT.jar \
          --main-class media.samson.jamplate.HelloApplication \
          --name jamplate \
          --app-version 1.0.0 \
          --vendor "Samson Media" \
          --description "Jamplate - Template Management Tool" \
          --dest target/native/linux \
          --type deb \
          --icon src/main/resources/icons/app-icon.png \
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" \
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" \
          --java-options "--add-modules java.desktop" \
          --linux-package-name jamplate \
          --linux-menu-group "Development" \
          --linux-shortcut
          
        # Create RPM package (Red Hat/Fedora/CentOS)
        jpackage \
          --input target/jpackage-input \
          --main-jar jamplate-1.0-SNAPSHOT.jar \
          --main-class media.samson.jamplate.HelloApplication \
          --name jamplate \
          --app-version 1.0.0 \
          --vendor "Samson Media" \
          --description "Jamplate - Template Management Tool" \
          --dest target/native/linux \
          --type rpm \
          --icon src/main/resources/icons/app-icon.png \
          --java-options "--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED" \
          --java-options "--add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED" \
          --java-options "--add-modules java.desktop" \
          --linux-package-name jamplate \
          --linux-menu-group "Development" \
          --linux-shortcut
          
        - name: üì¶ Create Universal Linux Packages (Snap & Flatpak)
      run: |
        # Install snapcraft for Snap package building
        sudo snap install snapcraft --classic
        
        echo "Building Snap package..."
        # Build Snap package using existing snapcraft.yaml
        snapcraft --destructive-mode || echo "Snap build failed, continuing..."
        
        # Move snap to target directory
        mkdir -p target/native/linux
        mv *.snap target/native/linux/ 2>/dev/null || echo "No snap file generated"
        
        echo "Flatpak manifest available at flatpak/media.samson.jamplate.yml"
        echo "Note: Flatpak requires complex CI setup with Flathub integration."
        echo "For local Flatpak builds, run:"
        echo "flatpak-builder build-dir flatpak/media.samson.jamplate.yml --force-clean"
          
    - name: üì§ Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-packages
        path: |
          target/native/linux/*.deb
          target/native/linux/*.rpm
          target/native/linux/*.snap
          target/native/linux/jamplate
          flatpak/
        retention-days: 5

  # Create GitHub Release
  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-jar, build-macos, build-windows, build-linux]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì• Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: üìã Prepare release files
      run: |
        mkdir -p release-files
        
        # Copy JAR distributions
        cp jar-distribution/*.zip release-files/ || true
        cp jar-distribution/*.tar.gz release-files/ || true
        
        # Copy macOS packages
        cp macos-packages/*.dmg release-files/ || true
        
        # Copy Windows packages  
        cp windows-packages/*.msi release-files/ || true
        cp windows-packages/*.exe release-files/ || true
        
        # Copy Linux packages
        cp linux-packages/*.deb release-files/ || true
        cp linux-packages/*.rpm release-files/ || true
        cp linux-packages/*.snap release-files/ || true
        
        # Create ZIP archives for app bundles
        if [ -d "macos-packages/Jamplate.app" ]; then
          cd macos-packages && zip -r ../release-files/Jamplate-macOS-app.zip Jamplate.app && cd ..
        fi
        
        if [ -d "windows-packages/Jamplate" ]; then
          cd windows-packages && zip -r ../release-files/Jamplate-Windows-app.zip Jamplate && cd ..
        fi
        
        if [ -d "linux-packages/jamplate" ]; then
          cd linux-packages && tar -czf ../release-files/jamplate-Linux-app.tar.gz jamplate && cd ..
        fi
        
        ls -la release-files/
        
    - name: üìù Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # Jamplate ${{ needs.build-jar.outputs.version }} Release
        
        ## üéâ What's New
        
        Professional-grade template management application with native installers for all platforms.
        
        ## üì¶ Download Options
        
        ### üöÄ Recommended for End Users (No Java Required)
        - **macOS**: Download `Jamplate-1.0.0.dmg` - Double-click to install
        - **Windows**: Download `Jamplate-1.0.0.msi` or `Jamplate-1.0.0.exe` - Run installer
        - **Linux (Debian/Ubuntu)**: Download `jamplate_1.0.0_amd64.deb` - Install with `sudo dpkg -i`
        - **Linux (Red Hat/Fedora)**: Download `jamplate-1.0.0-1.x86_64.rpm` - Install with `sudo rpm -i`
        - **Linux (Universal)**: Download `jamplate_1.0.0_amd64.snap` - Install with `sudo snap install`
        
        ### ‚ö° For Developers (Requires Java 21+)
        - **Cross-Platform JAR**: Download `jamplate-1.0-SNAPSHOT-distribution.zip`
        - Extract and run with included launch scripts
        
        ### üì± Application Bundles
        - **macOS App**: `Jamplate-macOS-app.zip` - Extract and run Jamplate.app
        - **Windows App**: `Jamplate-Windows-app.zip` - Extract and run
        - **Linux App**: `jamplate-Linux-app.tar.gz` - Extract and run
        
        ## ‚ú® Features
        
        - üé® **Professional UI** with custom branding and icons
        - üìù **Template Management** with variables and rich text editing
        - üíæ **Project Management** with save/load functionality
        - üìä **CSV Import** for bulk variable management
        - üéØ **Export Capabilities** for generated content
        - üöÄ **Native Performance** with embedded Java runtime
        
        ## üîß System Requirements
        
        ### Native Packages (Recommended)
        - **macOS**: macOS 10.14+ (Mojave or later)
        - **Windows**: Windows 10 or later (supports both MSI and EXE installers)
        - **Linux Debian/Ubuntu**: Ubuntu 18.04+ / Debian 10+ (DEB package)
        - **Linux Red Hat/Fedora**: RHEL 8+ / Fedora 32+ / CentOS 8+ (RPM package)
        - **Linux Universal**: Any distribution with Snap support (Snap package)
        - **Linux Sandboxed**: Any distribution with Flatpak support (Flatpak package)
        
        ### JAR Distribution
        - **Java**: Version 21 or later
        - **Any OS**: Windows, macOS, Linux
        
        ## üêõ Issues & Support
        
        - üìö **Documentation**: [User Guide](https://daniel-samson.github.io/jamplate-docs-forge/user-guide)
        - üêõ **Report Issues**: [GitHub Issues](https://github.com/daniel-samson/jamplate/issues)
        EOF
        
        echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT
        
    - name: üéâ Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.build-jar.outputs.version }}
        name: "Jamplate ${{ needs.build-jar.outputs.version }}"
        bodyFile: release_notes.md
        artifacts: "release-files/*"
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìä Release Summary
      run: |
        echo "## üéâ Release ${{ needs.build-jar.outputs.version }} Created Successfully!" 
        echo ""
        echo "### üì¶ Packages Built:"
        echo "- ‚úÖ Cross-platform JAR distribution"
        echo "- ‚úÖ macOS DMG installer + app bundle"  
        echo "- ‚úÖ Windows MSI + EXE installers + app bundle"
        echo "- ‚úÖ Linux DEB + RPM + Snap packages + app bundle"
        echo ""
        echo "### üîó Release URL:"
        echo "https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-jar.outputs.version }}" 